class UnionFind:
    def __init__(self, n):
        self.par = list(range(n))
        self.sz = [1] * n

    def find(self, u):
        # Path compression optimization
        if self.par[u] != self.par[self.par[u]]:
            self.par[u] = self.find(self.par[self.par[u]])
        return self.par[u]

    def connected(self, u, v):
        return self.find(u) == self.find(v)

    def join(self, u, v):
        u = self.find(u)
        v = self.find(v)
        if u == v:
            return False
        if self.sz[u] <= self.sz[v]:
            self.sz[v] += self.sz[u]
            self.par[u] = v
        else:
            self.sz[u] += self.sz[v]
            self.par[v] = u
        return True
